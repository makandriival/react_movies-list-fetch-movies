{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/FindMovie/FindMovies.constants.ts","components/MoviesList/MoviesList.tsx","api.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","onError","event","target","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","getMovie","query","fetch","then","res","json","catch","Response","Error","FindMovie","React","memo","onAddMovie","useState","setQuery","isLoading","setIsLoading","setMovie","isError","setIsError","handleGetMovie","a","preventDefault","trim","response","Title","Plot","Poster","imdbID","finally","htmlFor","type","id","placeholder","value","onChange","cn","onClick","disabled","App","setMovies","some","addedMovie","alert","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8235e4cb.chunk.js","sourcesContent":["import React, { SyntheticEvent } from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\nimport { defaultImgSrc } from '../FindMovie/FindMovies.constants';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n          onError={(event: SyntheticEvent<HTMLImageElement>) => {\n            const newTarget = event.target as HTMLImageElement;\n\n            newTarget.src = defaultImgSrc;\n          }}\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","export const defaultImgSrc\n  = 'https://via.placeholder.com/360x270.png?text=no%20preview';\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=7e4e35ac&';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import React, { FormEvent, useState } from 'react';\nimport './FindMovie.scss';\nimport cn from 'classnames';\nimport { getMovie } from '../../api';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  onAddMovie: (movie: Movie) => void\n}\n\nexport const FindMovie: React.FC<Props> = React.memo(({ onAddMovie }) => {\n  const [query, setQuery] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [isError, setIsError] = useState<string | null>(null);\n\n  const handleGetMovie = async (event: FormEvent) => {\n    event.preventDefault();\n\n    if (!query.trim()) {\n      setQuery('');\n      setIsError('Please type movie name');\n\n      return;\n    }\n\n    setIsLoading(true);\n\n    await getMovie(query.trim())\n      .then(response => {\n        if ('Error' in response) {\n          setIsError(\"Can't find a movie with such a title\");\n\n          return;\n        }\n\n        setMovie({\n          title: response.Title,\n          description: response.Plot,\n          imgUrl: response.Poster,\n          imdbUrl: `https://www.imdb.com/title/${response.imdbID}`,\n          imdbId: response.imdbID,\n        });\n      })\n      .finally(() => {\n        setQuery('');\n        setIsLoading(false);\n      });\n  };\n\n  const handleAddMovie = () => {\n    if (movie) {\n      onAddMovie(movie);\n      setMovie(null);\n      setQuery('');\n    }\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={query}\n              onChange={(event) => {\n                setIsError(null);\n                setQuery(event.target.value);\n              }}\n            />\n          </div>\n\n          {isError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              {isError}\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={cn('button is-light', {\n                'is-loading': isLoading,\n              })}\n              onClick={handleGetMovie}\n              disabled={!query}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          {movie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={handleAddMovie}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n});\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const handleAddMovie = (movie: Movie) => {\n    if (movies.some(addedMovie => addedMovie.imdbId === movie.imdbId)) {\n      // eslint-disable-next-line no-alert\n      alert('movie is already added!');\n    } else {\n      setMovies(prevMovies => [...prevMovies, movie]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie onAddMovie={handleAddMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}